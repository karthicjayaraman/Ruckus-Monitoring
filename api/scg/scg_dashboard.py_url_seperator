### This is SCG Dashboard blue print
### This will respond the jsons regarding scg dashboard such as global config, devices, dataplane, controlplane
### Date: Sep 3rd, 2015

from flask import Blueprint,g, request
from flask_cors import cross_origin
import json
import datetime
from bson import json_util
scg_dashboard = Blueprint('scg_dashboard', __name__, url_prefix='/scg')

### End points 
@scg_dashboard.route('/global_config')
def global_config():
	return "Global Config";

@scg_dashboard.route('/get_devices')
@cross_origin()
def get_devices():
	columns=['SCGIP','ClusterName','Role','NoOfControlPlane','NoOfDataPlane','NoOfAPs','NoOfClients','SCGVersion','ControlPlaneSoftwareVersion','DataPlaneSoftwareVersion','Consumed','WiFiControlLicenses','Timestamp']
	device_sql="select "+",".join(columns)+" from Devices";
	result=[];
	data = g.conn.select_advanced(device_sql);
	for row in data:
		row_data=dict(zip(columns, row));
		row_data['NoOfPlanes']=str(row_data['NoOfControlPlane'])+"/"+str(row_data['NoOfDataPlane']);
		row_data['WiFiControlLicenses']=str(row_data['Consumed'])+"/"+str(row_data['WiFiControlLicenses']);
		scgip=row_data['SCGIP'];
		### number of connected, disconnected and all APs
		noOfDisConAp=g.conn.select_advanced("SELECT SUM( DisconnectedAP ) FROM `ZoneDetails` WHERE SCGIP =  '"+scgip+"'");
		noOfDisConAp=noOfDisConAp[0];
		if noOfDisConAp==None:
			noOfDisConAp='0';
		noOfDisConAp=int(noOfDisConAp);
		totalAP=noOfDisConAp+int(row_data['NoOfAPs']);
		row_data['NoOfAPs']=str(totalAP)+"("+str(row_data['NoOfAPs'])+"/"+str(noOfDisConAp)+")";
		#row_data['Timestamp']=str(row_data['Timestamp']);
		follower=g.conn.select_advanced("select ManagementIP from ControlPlaneDetails where SCGIP='"+scgip+"' and Role='Follower'");
		row_data['Follower']=",".join(follower);
  		result.append(row_data);
	return json.dumps(result, default=json_util.default)



@scg_dashboard.route('/get_control_plane', methods=['GET', 'POST', 'OPTIONS'])
@cross_origin()
def get_control_plane():
	scgip='';
	if request.method == 'POST':
     		json_data = request.get_json()
		scgip=json_data.get("scg_ip", "")
		#print scgip
	planes={}
	columns=['ControlPlaneName','Model','SerialNumber','Description','Firmware','ManagementIP','ClusterIP','ControlIP','Role','NumberOfPorts','NumberOfAPs','NumberOfClients','CPUPercentage_Max_Min_Avg','MemoryPercentage_Max_Min_Avg','DiskUsage_Max_Min_Avg','Status','Uptime'];
	cplane_sql="select "+",".join(columns)+" from ControlPlaneDetails where SCGIP='"+scgip+"'";
	result=[]
	data = g.conn.select_advanced(cplane_sql);
        for row in data:
		cd_plane={}
		cplane=row[0];
		dpcols=['DataPlaneName','IPAddress','MACAddress','Model','SerialNumber','Firmware','ManagedBy','NumberOfTunnels','Status','Uptime'];
		dp_sql="select "+",".join(dpcols)+" from DataPlaneDetails where SCGIP='"+scgip+"' and ControlPlaneName='"+cplane+"'";
		ddata = g.conn.select_advanced(dp_sql);
		dplane_list=[]
		for dp in ddata:
			dplane_list.append(dict(zip(dpcols, dp)))
                cplane=dict(zip(columns, row))
		for key in cplane:
			if cplane[key]==None:
				cplane[key]="null";
		cplane['cpu_min']=cplane['CPUPercentage_Max_Min_Avg'];
		cplane['memory_min']=cplane['MemoryPercentage_Max_Min_Avg'];
		cplane['disk_min']=cplane['DiskUsage_Max_Min_Avg'];
		cd_plane['cplane']=cplane
		cd_plane['dplane']=dplane_list
		result.append(cd_plane);
        return json.dumps(result, default=json_util.default)
	

@scg_dashboard.route('/get_zone_details', methods=['GET', 'POST', 'OPTIONS'])
@cross_origin()
def get_zone_details():
	scgip='';
	limit=10;
	page=0;
        if request.method == 'POST':
                json_data = request.get_json();
		scgip=json_data.get("scg_ip", "")
                limit=json_data.get("limit", "")
		page=json_data.get("page","")
		#print "parameters",scgip,limit, page
        start=0;
        limit=int(limit);
        page=int(page);
        start=page*limit;
        columns=['ZoneName','Description','ManagementDomain','CreatedOn','CreatedBy','NumberofWLANs','NumberofAPs','NumberofClients','TunnelType']
        zone_sql="select "+",".join(columns)+" from ZoneDetails where SCGIP='"+scgip+"' limit "+str(start)+", "+ str(limit);
        result=[];       
        data = g.conn.select_advanced(zone_sql);
        for row in data:
                result.append(dict(zip(columns, row)))
        return json.dumps(result, default=json_util.default)


@scg_dashboard.route('/get_ap_activities/limit/<limit>/offset/<page>', methods=['GET', 'POST', 'OPTIONS'])
@cross_origin()
def get_ap_activities(limit=10,page=0):
	start=0;
        if request.method == 'POST':
                json_data = request.get_json();
                scgip=json_data.get("scg_ip", "")
                limit=json_data.get("limit", "")
                page=json_data.get("page","")
	limit=int(limit);
	page=int(page);
	start=page*limit;
        columns=['Timestamp','SCGName','Activity']
        ap_act_sql="select "+",".join(columns)+" from APActivities limit "+str(start)+", "+ str(limit);
        result=[];
        data = g.conn.select_advanced(ap_act_sql);
        for row in data:
                result.append(dict(zip(columns, row)))
        return json.dumps(result, default=json_util.default)


@scg_dashboard.route('/get_client_activities/limit/<limit>/offset/<page>', methods=['GET', 'POST', 'OPTIONS'])
@cross_origin()
def get_client_activities(limit=10,page=0):
        start=0;
        limit=int(limit);
        page=int(page);
        start=page*limit;
        columns=['Timestamp','SCGName','Content']
        critical_act_sql="select "+",".join(columns)+" from CriticalActivities limit "+str(start)+", "+ str(limit);
        result=[];
        data = g.conn.select_advanced(critical_act_sql);
        for row in data:
                result.append(dict(zip(columns, row)))
        return json.dumps(result, default=json_util.default)


### End points for Graphs


@scg_dashboard.route('/get_client_device_data')
@cross_origin()
def get_client_device_data():
	days='4';
        if request.method == 'POST':
                json_data = request.get_json();
                days=json_data.get("days", "")

	noOfDevice_sql="select ScgIP,NoOfClients,Timestamp from DevicesCompleteInfo where Timestamp>=DATE_SUB(CURDATE(),INTERVAL "+str(days)+" DAY) ORDER BY ScgIP, TimeStamp asc";
	data = g.conn.select_advanced(noOfDevice_sql);
	scgip_list=[];
	json_string='[ { "name" : "Show/Hide All" } ';
	for row in data:
		if row[0] not in scgip_list:
			scgip_list.append(row[0]);

        for scgip in scgip_list:
                graph_data=[]
                for row in data:
                        if row[0]==scgip:
                                timestamp=str(row[2]);
				timestamp=int(datetime.datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S").strftime('%s')) * 1000;
                                count=row[1]
                                if count != None:
                                        graph_data.append("["+str(timestamp)+","+str(count)+"]");
		json_string=json_string+', { "name" : "'+scgip+'" , "data" : '+'[ '+', '.join(graph_data)+' ] }';
	json_string=json_string+' ]';
	return json_string;
	
		
@scg_dashboard.route('/get_ap_device_data')
@cross_origin()
def get_ap_device_data():
        days='4';
        if request.method == 'POST':
                json_data = request.get_json();
                days=json_data.get("days", "")
        noOfDevice_sql="select ScgIP,NoOfAPs,Timestamp from DevicesCompleteInfo WHERE  Timestamp>=DATE_SUB(CURDATE(),INTERVAL "+str(days)+" DAY) ORDER BY ScgIP, TimeStamp asc";
        data = g.conn.select_advanced(noOfDevice_sql);
        scgip_list=[];
        json_string='[ { "name" : "Show/Hide All" }';
        for row in data:
                if row[0] not in scgip_list:
                        scgip_list.append(row[0]);

        for scgip in scgip_list:
                scgip_data={'name':scgip};
                graph_data=[]
                for row in data:
                        if row[0]==scgip:
                                timestamp=str(row[2]);
				timestamp=int(datetime.datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S").strftime('%s')) * 1000;
                                count=row[1]
                                if count != None:
                                        graph_data.append("["+str(timestamp)+","+str(count)+"]");
                json_string=json_string+',{ "name" :"'+scgip+'" , "data" : '+'[ '+', '.join(graph_data)+' ] }';
        json_string=json_string+' ]';
        return json_string;


@scg_dashboard.route('/get_tunnel_graph_data')
@cross_origin()
def get_tunnel_graph_data():
        scgip='scgip';
	cplane='cplane';
        if request.method == 'POST':
                json_data = request.get_json();
                scgip=json_data.get("scg_ip", "")
		cplane=json_data.get("cplane","")
	tunnel_sql="SELECT  DataPlaneName, NumberOfTunnels,TimeStamp FROM `DataPlaneDetailsCompleteInfo` where ControlPlaneName='"+cplane+"' and SCGIP='"+scgip+"' and DataPlaneName!=''"
        
        data = g.conn.select_advanced(tunnel_sql);
        dplane_list=[];
        json_string='[ { "name" : "Show/Hide All" }';
        for row in data:
                if row[0] not in dplane_list:
                        dplane_list.append(row[0]);

        for dplane in dplane_list:
                graph_data=[]
                for row in data:
                        if row[0]==dplane:
                                timestamp=str(row[2]);
                                timestamp=int(datetime.datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S").strftime('%s')) * 1000;
                                count=row[1]
                                if count != None:
                                        graph_data.append("["+str(timestamp)+","+str(count)+"]");
                json_string=json_string+',{ "name" :"'+dplane+'" , "data" : '+'[ '+', '.join(graph_data)+' ] }';
        json_string=json_string+' ]';
        return json_string;


@scg_dashboard.route('/get_cplane_uptime_data')
@cross_origin()
def get_cplane_uptime_data():
        scgip='scgip';
        if request.method == 'POST':
                json_data = request.get_json();
                scgip=json_data.get("scg_ip", "")
	cuptime_sql="SELECT  ControlPlaneName, Uptime,TimeStamp FROM `ControlPlaneDetailsCompleteInfo` where  SCGIP='"+scgip+"'"
        data = g.conn.select_advanced(cuptime_sql);
        cplane_list=[];
        json_string='[ { "name" : "Show/Hide All" }';
        for row in data:
                if row[0] not in cplane_list:
                        cplane_list.append(row[0]);

        for cplane in cplane_list:
                graph_data=[]
                for row in data:
                        if row[0]==cplane:
                                timestamp=str(row[2]);
                                timestamp=int(datetime.datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S").strftime('%s')) * 1000;
                                uptime=convert_to_min(row[1]);				
                                if uptime != None:
                                        graph_data.append("["+str(timestamp)+","+str(uptime)+"]");
                json_string=json_string+',{ "name" :"'+cplane+'" , "data" : '+'[ '+', '.join(graph_data)+' ] }';
        json_string=json_string+' ]';
        return json_string;

@scg_dashboard.route('/get_dplane_uptime_data')
@cross_origin()
def get_dplane_uptime_data():
        scgip='scgip';
	cplane='cplane';
        if request.method == 'POST':
                json_data = request.get_json();
                scgip=json_data.get("scg_ip", "")
		cplane=json_data.get("cplane","")
        duptime_sql="SELECT  DataPlaneName, Uptime,TimeStamp FROM `DataPlaneDetailsCompleteInfo` where ControlPlaneName='"+cplane+"' and SCGIP='"+scgip+"' and DataPlaneName!=''"
        data = g.conn.select_advanced(duptime_sql);
        dplane_list=[];
        json_string='[ { "name" : "Show/Hide All" }';
        for row in data:
                if row[0] not in dplane_list:
                        dplane_list.append(row[0]);

        for dplane in dplane_list:
                graph_data=[]
                for row in data:
                        if row[0]==dplane:
                                timestamp=str(row[2]);
                                timestamp=int(datetime.datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S").strftime('%s')) * 1000;
                                uptime=convert_to_min(row[1]);
                                if uptime != None:
                                        graph_data.append("["+str(timestamp)+","+str(uptime)+"]");
                json_string=json_string+',{ "name" :"'+dplane+'" , "data" : '+'[ '+', '.join(graph_data)+' ] }';
        json_string=json_string+' ]';
        return json_string;

def convert_to_min(uptime):
	uptime=uptime.split();
	day=0;
	hour=0;
	min=0;
	sec=0;
	for upt in uptime:
		if upt.endswith('d'):
			day=int(upt[:-1]);
			continue;
		if upt.endswith('h'):
			hour=int(upt[:-1]);
			continue;
		if upt.endswith('m'):
			min=int(upt[:-1]);
			continue;
		if upt.endswith('s'):
			sec=int(upt[:-1]);
	result=(day*24*60)+(hour*60)+(min*1)+int(sec/60)
	return result;
